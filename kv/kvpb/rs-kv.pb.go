// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: kv/kvpb/rs-kv.proto

package kvpb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RSKey struct {
	Comparable           uint32   `protobuf:"fixed32,1,opt,name=comparable,proto3" json:"comparable,omitempty"`
	ValueOffset          uint64   `protobuf:"fixed64,2,opt,name=valueOffset,proto3" json:"valueOffset,omitempty"`
	ValueLen             uint32   `protobuf:"fixed32,3,opt,name=valueLen,proto3" json:"valueLen,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RSKey) Reset()         { *m = RSKey{} }
func (m *RSKey) String() string { return proto.CompactTextString(m) }
func (*RSKey) ProtoMessage()    {}
func (*RSKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_b716ee529190e2c3, []int{0}
}
func (m *RSKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RSKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RSKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RSKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RSKey.Merge(m, src)
}
func (m *RSKey) XXX_Size() int {
	return m.Size()
}
func (m *RSKey) XXX_DiscardUnknown() {
	xxx_messageInfo_RSKey.DiscardUnknown(m)
}

var xxx_messageInfo_RSKey proto.InternalMessageInfo

func (m *RSKey) GetComparable() uint32 {
	if m != nil {
		return m.Comparable
	}
	return 0
}

func (m *RSKey) GetValueOffset() uint64 {
	if m != nil {
		return m.ValueOffset
	}
	return 0
}

func (m *RSKey) GetValueLen() uint32 {
	if m != nil {
		return m.ValueLen
	}
	return 0
}

type ReducedSegmentKvHeader struct {
	KeySize              uint32           `protobuf:"fixed32,1,opt,name=keySize,proto3" json:"keySize,omitempty"`
	NSegments            uint32           `protobuf:"fixed32,2,opt,name=nSegments,proto3" json:"nSegments,omitempty"`
	SegmentSize          uint32           `protobuf:"fixed32,3,opt,name=segmentSize,proto3" json:"segmentSize,omitempty"`
	SegmentHeaders       []*SegmentHeader `protobuf:"bytes,4,rep,name=segmentHeaders,proto3" json:"segmentHeaders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReducedSegmentKvHeader) Reset()         { *m = ReducedSegmentKvHeader{} }
func (m *ReducedSegmentKvHeader) String() string { return proto.CompactTextString(m) }
func (*ReducedSegmentKvHeader) ProtoMessage()    {}
func (*ReducedSegmentKvHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b716ee529190e2c3, []int{1}
}
func (m *ReducedSegmentKvHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReducedSegmentKvHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReducedSegmentKvHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReducedSegmentKvHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReducedSegmentKvHeader.Merge(m, src)
}
func (m *ReducedSegmentKvHeader) XXX_Size() int {
	return m.Size()
}
func (m *ReducedSegmentKvHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_ReducedSegmentKvHeader.DiscardUnknown(m)
}

var xxx_messageInfo_ReducedSegmentKvHeader proto.InternalMessageInfo

func (m *ReducedSegmentKvHeader) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func (m *ReducedSegmentKvHeader) GetNSegments() uint32 {
	if m != nil {
		return m.NSegments
	}
	return 0
}

func (m *ReducedSegmentKvHeader) GetSegmentSize() uint32 {
	if m != nil {
		return m.SegmentSize
	}
	return 0
}

func (m *ReducedSegmentKvHeader) GetSegmentHeaders() []*SegmentHeader {
	if m != nil {
		return m.SegmentHeaders
	}
	return nil
}

type SegmentHeader struct {
	NKeys                uint32   `protobuf:"fixed32,1,opt,name=nKeys,proto3" json:"nKeys,omitempty"`
	SegmentOffset        uint64   `protobuf:"fixed64,2,opt,name=segmentOffset,proto3" json:"segmentOffset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentHeader) Reset()         { *m = SegmentHeader{} }
func (m *SegmentHeader) String() string { return proto.CompactTextString(m) }
func (*SegmentHeader) ProtoMessage()    {}
func (*SegmentHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b716ee529190e2c3, []int{2}
}
func (m *SegmentHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SegmentHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SegmentHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SegmentHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentHeader.Merge(m, src)
}
func (m *SegmentHeader) XXX_Size() int {
	return m.Size()
}
func (m *SegmentHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentHeader proto.InternalMessageInfo

func (m *SegmentHeader) GetNKeys() uint32 {
	if m != nil {
		return m.NKeys
	}
	return 0
}

func (m *SegmentHeader) GetSegmentOffset() uint64 {
	if m != nil {
		return m.SegmentOffset
	}
	return 0
}

func init() {
	proto.RegisterType((*RSKey)(nil), "kvpb.RSKey")
	proto.RegisterType((*ReducedSegmentKvHeader)(nil), "kvpb.ReducedSegmentKvHeader")
	proto.RegisterType((*SegmentHeader)(nil), "kvpb.SegmentHeader")
}

func init() { proto.RegisterFile("kv/kvpb/rs-kv.proto", fileDescriptor_b716ee529190e2c3) }

var fileDescriptor_b716ee529190e2c3 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0x2e, 0xd3, 0xcf,
	0x2e, 0x2b, 0x48, 0xd2, 0x2f, 0x2a, 0xd6, 0xcd, 0x2e, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x01, 0x89, 0x28, 0xa5, 0x72, 0xb1, 0x06, 0x05, 0x7b, 0xa7, 0x56, 0x0a, 0xc9, 0x71, 0x71,
	0x25, 0xe7, 0xe7, 0x16, 0x24, 0x16, 0x25, 0x26, 0xe5, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xb0,
	0x07, 0x21, 0x89, 0x08, 0x29, 0x70, 0x71, 0x97, 0x25, 0xe6, 0x94, 0xa6, 0xfa, 0xa7, 0xa5, 0x15,
	0xa7, 0x96, 0x48, 0x30, 0x29, 0x30, 0x6a, 0xb0, 0x05, 0x21, 0x0b, 0x09, 0x49, 0x71, 0x71, 0x80,
	0xb9, 0x3e, 0xa9, 0x79, 0x12, 0xcc, 0x60, 0xfd, 0x70, 0xbe, 0xd2, 0x7a, 0x46, 0x2e, 0xb1, 0xa0,
	0xd4, 0x94, 0xd2, 0xe4, 0xd4, 0x94, 0xe0, 0xd4, 0xf4, 0xdc, 0xd4, 0xbc, 0x12, 0xef, 0x32, 0x8f,
	0xd4, 0xc4, 0x94, 0xd4, 0x22, 0x21, 0x09, 0x2e, 0xf6, 0xec, 0xd4, 0xca, 0xe0, 0xcc, 0x2a, 0x98,
	0xad, 0x30, 0xae, 0x90, 0x0c, 0x17, 0x67, 0x1e, 0x54, 0x75, 0x31, 0xd8, 0x42, 0xf6, 0x20, 0x84,
	0x00, 0xc8, 0x41, 0xc5, 0x10, 0x36, 0x58, 0x2f, 0xc4, 0x46, 0x64, 0x21, 0x21, 0x6b, 0x2e, 0x3e,
	0x28, 0x17, 0x62, 0x55, 0xb1, 0x04, 0x8b, 0x02, 0xb3, 0x06, 0xb7, 0x91, 0xb0, 0x1e, 0xc8, 0xeb,
	0x7a, 0xc1, 0xc8, 0x72, 0x41, 0x68, 0x4a, 0x95, 0xbc, 0xb9, 0x78, 0x51, 0x14, 0x08, 0x89, 0x70,
	0xb1, 0xe6, 0x79, 0xa7, 0x56, 0x16, 0x43, 0x5d, 0x09, 0xe1, 0x08, 0xa9, 0x70, 0xf1, 0x42, 0x35,
	0xa2, 0x04, 0x0c, 0xaa, 0xa0, 0x93, 0xd8, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
	0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0x38, 0xf4, 0x93, 0xd8, 0xc0, 0x51, 0x61,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x96, 0x31, 0xb4, 0x1f, 0xa1, 0x01, 0x00, 0x00,
}

func (m *RSKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RSKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RSKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ValueLen != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.ValueLen))
		i--
		dAtA[i] = 0x1d
	}
	if m.ValueOffset != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.ValueOffset))
		i--
		dAtA[i] = 0x11
	}
	if m.Comparable != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Comparable))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *ReducedSegmentKvHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReducedSegmentKvHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReducedSegmentKvHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SegmentHeaders) > 0 {
		for iNdEx := len(m.SegmentHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SegmentHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRsKv(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SegmentSize != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.SegmentSize))
		i--
		dAtA[i] = 0x1d
	}
	if m.NSegments != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NSegments))
		i--
		dAtA[i] = 0x15
	}
	if m.KeySize != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.KeySize))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *SegmentHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SegmentHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SegmentHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.SegmentOffset != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.SegmentOffset))
		i--
		dAtA[i] = 0x11
	}
	if m.NKeys != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.NKeys))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func encodeVarintRsKv(dAtA []byte, offset int, v uint64) int {
	offset -= sovRsKv(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RSKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Comparable != 0 {
		n += 5
	}
	if m.ValueOffset != 0 {
		n += 9
	}
	if m.ValueLen != 0 {
		n += 5
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ReducedSegmentKvHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.KeySize != 0 {
		n += 5
	}
	if m.NSegments != 0 {
		n += 5
	}
	if m.SegmentSize != 0 {
		n += 5
	}
	if len(m.SegmentHeaders) > 0 {
		for _, e := range m.SegmentHeaders {
			l = e.Size()
			n += 1 + l + sovRsKv(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SegmentHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NKeys != 0 {
		n += 5
	}
	if m.SegmentOffset != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRsKv(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRsKv(x uint64) (n int) {
	return sovRsKv(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RSKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RSKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RSKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmallerThan", wireType)
			}
			m.Comparable = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Comparable = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueOffset", wireType)
			}
			m.ValueOffset = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueOffset = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueLen", wireType)
			}
			m.ValueLen = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueLen = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		default:
			iNdEx = preIndex
			skippy, err := skipRsKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRsKv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRsKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReducedSegmentKvHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReducedSegmentKvHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReducedSegmentKvHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeySize", wireType)
			}
			m.KeySize = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.KeySize = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NSegments", wireType)
			}
			m.NSegments = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NSegments = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentSize", wireType)
			}
			m.SegmentSize = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentSize = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRsKv
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRsKv
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRsKv
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentHeaders = append(m.SegmentHeaders, &SegmentHeader{})
			if err := m.SegmentHeaders[len(m.SegmentHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRsKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRsKv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRsKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SegmentHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRsKv
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SegmentHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SegmentHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field NKeys", wireType)
			}
			m.NKeys = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.NKeys = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field SegmentOffset", wireType)
			}
			m.SegmentOffset = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.SegmentOffset = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		default:
			iNdEx = preIndex
			skippy, err := skipRsKv(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRsKv
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRsKv
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRsKv(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRsKv
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRsKv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRsKv
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRsKv
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRsKv
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRsKv
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRsKv        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRsKv          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRsKv = fmt.Errorf("proto: unexpected end of group")
)
